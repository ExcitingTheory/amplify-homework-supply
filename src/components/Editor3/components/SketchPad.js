// react component to display an interactive excalidraw sketchpad when the cursor hovers over the component, and a static image when the cursor is not hovering over the component. The static image is generated by exporting the excalidraw contents.

import { Excalidraw, MainMenu, exportToSvg } from "@excalidraw/excalidraw";
import { useState, useEffect, useRef } from "react";
import { exportToCanvas, restoreAppState } from "@excalidraw/excalidraw";
import { generateClient } from "aws-amplify/api";
import { verifyImage } from "../../../graphql/queries";

// import { useTranslation } from "react-i18next";
// import { useTheme } from "@mui/material/styles";
const client = generateClient();
// TODO Add a version to the data so that we can update the data when the version is higher than the current working copy, which should be one above the last saved version

const SketchPad = ({ excalidrawData,
    persistData,
    expect,
    setFeedback,
    feedback,
    questionID
 }) => {
    const [isHovering, setIsHovering] = useState(false);
    const [excalidrawAPI, setExcalidrawAPI] = useState(null);
    const [imageData, setImageData] = useState(null);

    const [_excalidrawData, setExcalidrawData] = useState(excalidrawData || {
        elements: [],
        appState: {},
        version: 0,
    });
    const canvasRef = useRef(null);
    const excalidrawRef = useRef(excalidrawData || {
        elements: [],
        appState: {},
        version: 0,
    });
    // const updateTimeout = useRef(null);
    // const { t } = useTranslation();
    // const theme = useTheme();

    const thisVersion = _excalidrawData.version;
    const nextVersion = thisVersion + 1;

    const exportCanvas = (elements, appState) => {
        console.log("exporting canvas");
        console.log("elements", elements);
        console.log("appState", appState);
        
        const canvas = exportToCanvas({
            elements,
            appState,
        });
        canvasRef.current = canvas;
    }

    const updateExcalidrawData = (elements, appState, files, svg) => {
        // if the version is higher than the current version, update the version
        console.log("thisVersion", thisVersion);
        console.log("nextVersion", nextVersion);
        console.log("elements", elements);
        console.log("appState", appState);
        console.log("files", files);
        console.log("svg", svg);

        if (nextVersion > thisVersion) {
            console.log("updating data");
            
            setExcalidrawData({ elements, appState, version: nextVersion });
            persistData({ elements, appState, version: nextVersion  });
            restoreAppState({
                elements,
                appState,
                localElements: elements,
            });
            exportCanvas(elements, appState);
        }
    }

    useEffect(() => {
        if (excalidrawAPI) {
            excalidrawAPI.setActiveTool("freedraw", true);
        }
    }, [JSON.stringify(excalidrawAPI)]);

    // set excalidrawData to the initial data passed in
    useEffect(() => {
        setExcalidrawData(excalidrawData);
        restoreAppState({
            elements: excalidrawData.elements,
            appState: excalidrawData.state,
            localElements: excalidrawData.elements,
        });
    }, []);

    // update excalidrawData when new data is passed in

    // render canvas when not hovering, excalidraw when hovering
    if (!isHovering) {
        // if(!SvgTag) {
        //  return
        // }
        // const svgMarkup =  new XMLSerializer().serializeToString(svgTag)
        return (
        <div
            // ref={svgRef}
            // dangerouslySetInnerHTML={{ __html: svgMarkup }}
            onMouseEnter={() => { 
                if(imageData) {
                    return
                }
                setIsHovering(true);
            }}
            style={{
                height: "400px", width: "600px" }} 
        >
            {imageData? <img src={`data:image/png;base64,${imageData}`} alt="sketch" /> : null }
            
        </div>);
    } else {
        return (
        <div 
        onMouseLeave={async () => {
        
            const elements = excalidrawRef.current.elements;
            const appState = excalidrawRef.current.state;
            const files = excalidrawAPI?.getFiles();

            const canvas = await exportToCanvas({
                elements,
                appState,
                files,
            });

            // convert the canvas to a PNG image and base64 encode it

            const dataUrl = await canvas.toDataURL("image/png");
            const justBase64 = dataUrl.split(",")[1];
            setImageData(justBase64);
            setIsHovering(false);

            try {

                const response = await client.graphql({
                    query: verifyImage,
                    variables: {
                        expected: expect,
                        image: justBase64,
                        model: "gpt-4o",
                    },
                });
                const mainData = JSON.parse(response?.data?.verifyImage) || {}
                const data = JSON.parse(mainData?.choices[0]?.message?.content) || {}
                
                setFeedback(data);
            } catch (error) {
                console.error(error);
                setFeedback(data);
            }       

        }}
        style={{ height: "400x", width: "600px" }}>
            <Excalidraw
            initialData={excalidrawData}
            // theme={theme}
            onChange={(elements, state) => {
                excalidrawRef.current = { elements, state };
            }}
            // loadScene={false}
            // saveToActiveFile={false}
            clearCanvas={true}
            // saveAsImage={false}
            autoFocus={true}
            excalidrawAPI={(api) => {
                setExcalidrawAPI(api)}}
            >
        <MainMenu>
          <MainMenu.Item onSelect={async () => {
            console.log("Grade  button clicked");
            const elements = excalidrawAPI.getSceneElements();
            let files = [];
            if (excalidrawAPI){
                files = excalidrawAPI.getFiles();
            }
            const appState = excalidrawAPI.getAppState();
            const svg = await exportToSvg({
                elements,
                appState,
                files,
            });

            const serializer = new XMLSerializer();
            const svgString = serializer.serializeToString(svg);

            console.log("svgString", svgString);


            updateExcalidrawData(elements, appState, files, svgString);
          }}>
            Grade
          </MainMenu.Item>
          <MainMenu.Item onSelect={() => window.alert("Item2")}>
            Item 2
          </MainMenu.Item>
        </MainMenu>
        </Excalidraw>
        </div>
        );
    }
}

export default SketchPad;
